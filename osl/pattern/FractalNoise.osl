/*
 *  Copyright 2023 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
shader pattern_FractalNoise
[[
    int rfm_nodeid = 1234265,
    string rfm_classification = "rendernode/RenderMan/pattern/Laika"
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Produces "
            "<a href='https://en.wikipedia.org/wiki/Fractional_Brownian_motion'>"
            "fractional Brownian motion</a> "
            "or a "
            "<a href='https://en.wikipedia.org/wiki/Fractal'> fractal</a> "
            "pattern using the selected <b>Noise Type</b>. "
    ]],

    point Space = point(0.0)
    [[
        string readOnly = "True",
        string help =
            "When connected, defines the <b>Space</b> "
            "in which the pattern is generated. "
            "<p>"
            "Otherwise, will use the <tt>__Pref</tt> primvar "
            "values if they exist, or object space if they do not. "
            "</p>"
    ]],

    float SpaceSize = 1.0
    [[
        string label = "Space Size",
        string readOnly = "True",
        string help =
            "The <b>Size</b> of the connected <b>Space</b>. "
            "Along with the pattern's <b>Size</b> parameter, this determines "
            "the size of the resulting pattern variations this node produces. "
    ]],

    float Size = 1.0
    [[
        int slider = 1, float slidermin = 0.1, float slidercenter = 1.0, float slidermax = 10.0,
        string help =
            "Controls the <b>Size</b> of the pattern variation. "
    ]],

    string NoiseType = "uperlin"
    [[
        int connectable = 0,
        string label = "Noise Type",
        string widget = "mapper",
        string options = "Perlin:uperlin|Simplex:usimplex|Cell:cell",
        string help =
            "Selects whether <i>Perlin</i>, <i>Simplex</i>, or <i>Cell</i> noise is used. "
    ]],

    int NoiseDim = 3
    [[
        int connectable = 0,
        string label = "Noise Dim",
        string widget = "mapper",
        string options = "2D:2|3D:3|4D:4",
        string help =
            "Explicitly controls the <b>Dimension</b> of the <b>Noise</b>. "
            "This can have a particularly large impact on the <i>Simplex</i> <b>Noise Type</b>. "
    ]],

    int FractalType = 0
    [[
        int connectable = 0,
        string label = "Fractal Type",
        string widget = "mapper",
        string options = "fBm:0|Fractal:1",
        string help =
            "Selects whether fractional Brownian motion (<i>fBm</i>) "
            "or a standard <i>Fractal</i> is produced. "
    ]],

    float Gain = 0.5
    [[
        int slider = 1, float slidermin = 0.0, float slidermax = 1.0,
        string conditionalVisPath = "../FractalType",
        string conditionalVisOp = "equalTo",
        string conditionalVisValue = "0",
        string help =
            "The scaling factor used in <i>fBm</i> to control the contribution of each successive "
            "iteration. Bigger values are \"rougher\", smaller values are \"smoother\". "
            "The amplitude of each iteration is <b>Gain</b><tt>^(i-1)</tt>; where <tt>i</tt> is the "
            "iteration number. "
            "<p>"
            "The process starts with the largest basis function pattern with amplitude = 1. "
            "</p>"
    ]],

    float Dimension = 1.0
    [[
        string label = "Dimension",
        int slider = 1, float slidermin = 0.0, float slidermax = 1.5,
        string conditionalVisPath = "../FractalType",
        string conditionalVisOp = "equalTo",
        string conditionalVisValue = "1",
        string help =
            "The result is a combination of <b>Iterations</b> number of basis function patterns. "
            "<p>"
            "The amplitude of each successive iteration in the <i>Fractal</i> generation "
            "process is determined by the frequency (<tt>f</tt>) of the basis function pattern "
            "and the <b>Dimension</b> value: <br/>"
            "amplitude = <tt>1/(f^ß)</tt>, where <tt>ß = 3-2*</tt><b>Dimension</b>. "
            "</p>"
            "The process starts with the largest basis function pattern with amplitude = <tt>1</tt>. "
    ]],

    float Lacunarity = 2.0
    [[
        int connectable = 0,
        int slider = 1, float slidermin = 1.0, float slidermax = 5.0,
        string help =
            "The result is a combination of <b>Iterations</b> number of basis function patterns. "
            "<p>"
            "The frequency of each successive basis function pattern in the generation "
            "process is scaled up from the previous frequency by the <b>Lacunarity</b> value: "
            "<tt>f(i+1) = f(i)*</tt><b>Lacunarity</b>, where <tt>f</tt> is frequency "
            "and <tt>i</tt> is iteration number. "
            "</p>"
            "The process starts with the largest basis function pattern at <tt>f</tt> = <b>Frequency</b>. "
    ]],

    int Iterations = 5
    [[
        int connectable = 0,
        int slider = 1, float slidermin = 1, float slidermax = 10, float sensitivity = 1,
        string help =
            "The result is a combination of <b>Iterations</b> number of basis function patterns. "
            "<p>"
            "Each successive basis function pattern in the generation process is "
            "<b>Lacunarity</b> times the frequency of the basis function "
            "pattern generated before it. "
            "</p>"
            "The process starts with the largest basis function pattern at "
            "<tt>f</tt> = <b>Frequency</b> and amplitude = <tt>1</tt>. "
    ]],

    float Erosion = 0.0
    [[
        int slider = 1, float slidermin = -2.0, float slidermax = 2.0,
        string help =
            "<b>Erosion</b> determines the so-called \"crossover scale\" of the result. "
            "<p>"
            "<i>Negative</i> values will smooth out the <i>low valued</i> areas.<br/> "
            "<i>Positive</i> values will smooth the <i>high valued</i> ones.<br/> "
            "<i>0</i> gives a uniform appearance. "
            "</p>"
            "Implementation detail: the frequency exponent specified by the <b>Dimension</b> "
            "or <b>Gain</b> is itself offset as a function of the pattern's magnitude. "
            "<b>Erosion</b> adjusts that offset. "
    ]],

    float Variation = 0.0
    [[
        int slider = 1, float slidermin = 0.0, float slidermax = 10.0,
        string help =
            "This varies the result without changing any of its fundamental "
            "characteristics. Can be used to animate the resulting pattern, "
            "or just produce a different variant of it. "
    ]],

    output float  Float = 0.0,
    output color  Gray = color(0.0),
    output color  Color = color(0.0),
    output point  Point = point(0.0),
    output vector Vector = vector(0.0),
    output normal Normal = normal(0.0),
    output float  OutSize = 0.0
)
{
    // Pattern generation space.
    point  Q = Space;

    if( !isconnected( Space ))
    {
        Q = P; // Referencing P is required for any down-stream auto-differentiation.
        getattribute( "builtin", "Po", Q ); // Use un-displaced P.
        getattribute( "primvar", "__Pref", Q ); // Use Pref if present.
        Q = transform( "common", "object", Q ); // Correct in all cases.
    }

    // Size scaling.
    float  size = max( 1.0e-6, Size );
    Q /= size;
    OutSize = SpaceSize * size;

    // Initialize the iteration variables.
    float  freqi = 1.0;
    color  sum = color(0.0);
    color  mag = color(1.0);

    Color = color(0.0);

    // Compute the fractal.
    for( int i=0; i < Iterations; i++ )
    {
        // This iteration's frequency.
        point  Qi = Q*freqi;

        // Variation offset.
        float  variation = Variation + i*Lacunarity;

        // Accumulate this iteration's noise pattern.
        if( 2 == NoiseDim )
        {
            Color += mag * noise( NoiseType, Qi.x + variation, Qi.y + variation );
        }
        else if( 3 == NoiseDim )
        {
            Color += mag * noise( NoiseType, Qi + point(variation) );
        }
        else // 4 == NoiseDim
        {
            Color += mag * noise( NoiseType, Qi, variation );
        }

        // Update for the next iteration.
        freqi *= Lacunarity;
        sum += mag;

        // Erosion adjustment.
        color  erosion = mix( -Erosion, Erosion, Color/sum );

        // Fractal magnitude of the next iteration.
        if( FractalType == 0 )
        {
            mag = pow( Gain, i+1.0 + 100.0*Gain*erosion );
        }
        else
        {
            mag = color(1.0) / pow( freqi, (3.0-2.0*Dimension) + 2.0*erosion );
        }
    }

    // Normalize the result.
    Color /= sum;

    // Set the other outputs.
    Float = Color.r;
    Gray = color( Float );
    Point = point( Color );
    Vector = vector( 2.0*Color - color(1.0) );
    Normal = normalize( Vector );
}
