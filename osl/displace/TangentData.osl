/*
 *  Copyright 2023 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
shader displace_TangentData
[[
    int rfm_nodeid = 1234257,
    string rfm_classification = "rendernode/RenderMan/pattern/Laika"
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Converts a Tangent-space <u>Normal Map</u> into "
            "a bumped shading <b>Normal</b> "
            "and a <b>SurfaceGradient</b> shading normal representation, "
            "<br/><i>or</i> "
            "<br/>a Tangent-space <u>Vector Displacement Map</u> into LaSh "
            "Displacement (LaD) components (<b>Nd</b>, <b>DeltaP</b>, and <b>Bulk</b>)."
            "<p>"
            "Note: Normal Maps and Vector Displacement Maps "
            "are not interchangable: their data is made for one "
            "use or the other. "
            "</p>"
    ]],

    color RGB = color(0.0)
    [[
        string readOnly = "True",
        string help =
            "The Tangent-space Normal Map or Vector Displacement Map data. "
            "<p>"
            "Note: Normal Maps and Vector Displacement Maps "
            "are not interchangable: their data is made for one "
            "use or the other. "
            "</p>"
    ]],

    float RGBSize = 1.0
    [[
        string label = "RGB Size",
        string readOnly = "True",
        string help =
            "The <b>Size</b> of the connected <b>RGB</b> pattern variations. "
    ]],

    int ExpandRGB = 0
    [[
        int connectable = 0,
        string label = "Expand RGB",
        string widget = "checkBox",
        string help =
            "Tangent-space Normal and Vector Displacement data can either "
            "be un-encoded (-1,1) ranged values, or encoded into (0,1) "
            "ranged <b>RGB</b> values. "
            "<p>"
            "Typically, Normal Maps are encoded (and therefore must "
            "be expanded), and Vector Displacement Maps are not "
            "(and therefore don't need expansion). "
            "<p/>"
    ]],

    int Orientation = 0
    [[
        int connectable = 0,
        string label = "Orientation",
        string widget = "mapper",
        string options = "OpenGL:0|DirectX:1|Custom:2",
        string help =
            "Different applications generate Tangent-space Maps "
            "using different tangent and bi-tangent directions. "
            "<b>Orientation</b> selects what standard directions to use, "
            "or you can select <i>Custom</i> to manually control these. "
    ]],

    int InvertSProfile = 0
    [[
        int connectable = 0,
        string label = "Invert S Profile",
        string widget = "checkBox",
        string conditionalVisPath = "../Orientation",
        string conditionalVisOp = "equalTo",
        string conditionalVisValue = "2",
        string help =
            "Invert the profile along the S direction: "
            "Concave -> convex and vice versa. "
    ]],

    int InvertTProfile = 0
    [[
        int connectable = 0,
        string label = "Invert T Profile",
        string widget = "checkBox",
        string conditionalVisPath = "../Orientation",
        string conditionalVisOp = "equalTo",
        string conditionalVisValue = "2",
        string help =
            "Invert the profile along the T direction: "
            "Concave -> convex and vice versa. "
    ]],

    float Magnitude = 0.5
    [[
        string label = "Magnitude",
        int slider = 1, float slidermin = 0.0, float slidermax = 1.0,
        string help =
            "Controls the <b>Magnitude</b> of the displacement. "
    ]],

    string MagnitudeSpace = "world"
    [[
        int connectable = 0,
        string label = "Magnitude Space",
        string widget = "popup", int editable = 1,
        string options =
            "object"
            "|world",
        string help =
            "Determines in what <b>Space</b> the units of <b>Magnitude</b> are specified: "
            "how big is 1 unit of <b>Magnitude</b> displacement?"
    ]],

    int Invert = 0
    [[
        int connectable = 0,
        string label = "Invert",
        string widget = "checkBox",
        string help =
            "<b>Invert</b> the displacement pattern: high becomes low, "
            "concave becomes convex, and vice versa. "
    ]],

    float BulkGain = 1.0
    [[
        string label = "Bulk Gain",
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "Scales the output <b>Bulk</b> relative "
            "to the displacement <b>Magnitude</b>. "
            "Bulk is used when displacements Accumulate. "
            "Useful when the <b>Vector Displacement</b> length does not occupy the 0 to 1 "
            "dymanic range of values, or simply to allow more user control "
            "of how much bulk this displacement produces. "
    ]],

    float BumpGain = 1.0
    [[
        string label = "Bump Gain",
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "Controls how much bumped appearance the resulting "
            "shading <b>Normal</b> or <b>SurfaceGradient</b> will contain. "
    ]],


    output vector SurfaceGradient = vector(0.0),
    output normal Normal = normal(0.0),
    output normal Nd = N,
    output vector DeltaP = vector(0.0),
    output float  Bulk = 0.0
)
{
    // Tangent map data: eigenvalues.
    vector tmd = RGB;

    // Decode the data: (0,1) -> (-1,1)
    if( ExpandRGB ) tmd = 2.0*tmd - vector(1.0);

    // Profile orientation. Default to OpenGL.
    if( 1 == Orientation ) // DirectX
    {
        tmd.y = -tmd.y;
    }
    else if( 2 == Orientation ) // Custom
    {
        if( InvertSProfile ) tmd.x = -tmd.x;
        if( InvertTProfile ) tmd.y = -tmd.y;
    }

    // Profile depends on geometric orientation.
    string  RiOrientation;
    getattribute( "Ri:Orientation", RiOrientation );

    if( RiOrientation != "inside" )
    {
        tmd.x = -tmd.x;
        tmd.y = -tmd.y;
    }

    // Convert from tangent space to common space eigenvectors.
    // -T & -B for RenderMan orientation 'inside'.
    vector T; getattribute( "builtin", "Tn", T );
    vector B = cross( N, T );


    //=====================
    // Vector displacement
    //=====================
    DeltaP = -T * tmd.x +
             -B * tmd.y +
              N * tmd.z;

    // Displacement magnitude.
    float  magnitude = RGBSize * Magnitude;

    // Scale magnitude to common space.
    matrix  mag_to_common;
    if( getmatrix( MagnitudeSpace, "common", mag_to_common ))
    {
        magnitude *= pow( abs( determinant( mag_to_common )), (1.0/3.0) );
    }
    else
    {
        warning(
            "Magnitude Space = \"%s\" couldn't be found. "
            "Using \"common\" space instead. ",
            MagnitudeSpace
            );
    }

    // The common-space change in the surface.
    DeltaP *= magnitude;

    // Compute the displaced surface normal.
    point  Po = P;
    getattribute( "builtin", "Po", Po );
    Nd = normalize( calculatenormal( Po + DeltaP ));

    // Displacement accumulation Bulk.
    Bulk = magnitude * BulkGain;


    //=====================
    // Bumped normal
    //=====================
    Normal = -T * tmd.x +
             -B * tmd.y +
              N * tmd.z;

    if( dot(Ng,Normal) < 0.0 ) Normal = -Normal;

    // Mikkelsen, M. 2020
    // Surface Gradientâ€“Based Bump Mapping Framework
    // Journal of Computer Graphics Techniques, Vol. 9, No. 3
    // https://jcgt.org/published/0009/03/04/
    float  k = dot( N, Normal );
    SurfaceGradient = ( k*N - Normal )/max( 1.0e-10, abs(k) ) * BumpGain;

    // Use Surface Gradient based shading normal instead of raw data.
    Normal = normalize( N - SurfaceGradient );
}
